// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "location.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace location {

namespace {

const ::google::protobuf::Descriptor* PlaneLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaneLocation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_location_2eproto() {
  protobuf_AddDesc_location_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "location.proto");
  GOOGLE_CHECK(file != NULL);
  PlaneLocation_descriptor_ = file->message_type(0);
  static const int PlaneLocation_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, alt_agl_meters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, alt_asl_meters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, roll_degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, pitch_degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, yaw_degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, lat_degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, lon_degrees_),
  };
  PlaneLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaneLocation_descriptor_,
      PlaneLocation::default_instance_,
      PlaneLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaneLocation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_location_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaneLocation_descriptor_, &PlaneLocation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_location_2eproto() {
  delete PlaneLocation::default_instance_;
  delete PlaneLocation_reflection_;
}

void protobuf_AddDesc_location_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016location.proto\022\010location\"\253\001\n\rPlaneLoca"
    "tion\022\026\n\016alt_agl_meters\030\001 \001(\002\022\026\n\016alt_asl_"
    "meters\030\002 \001(\002\022\024\n\014roll_degrees\030\003 \001(\002\022\025\n\rpi"
    "tch_degrees\030\004 \001(\002\022\023\n\013yaw_degrees\030\005 \001(\002\022\023"
    "\n\013lat_degrees\030\006 \001(\001\022\023\n\013lon_degrees\030\007 \001(\001", 200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "location.proto", &protobuf_RegisterTypes);
  PlaneLocation::default_instance_ = new PlaneLocation();
  PlaneLocation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_location_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_location_2eproto {
  StaticDescriptorInitializer_location_2eproto() {
    protobuf_AddDesc_location_2eproto();
  }
} static_descriptor_initializer_location_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlaneLocation::kAltAglMetersFieldNumber;
const int PlaneLocation::kAltAslMetersFieldNumber;
const int PlaneLocation::kRollDegreesFieldNumber;
const int PlaneLocation::kPitchDegreesFieldNumber;
const int PlaneLocation::kYawDegreesFieldNumber;
const int PlaneLocation::kLatDegreesFieldNumber;
const int PlaneLocation::kLonDegreesFieldNumber;
#endif  // !_MSC_VER

PlaneLocation::PlaneLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaneLocation::InitAsDefaultInstance() {
}

PlaneLocation::PlaneLocation(const PlaneLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaneLocation::SharedCtor() {
  _cached_size_ = 0;
  alt_agl_meters_ = 0;
  alt_asl_meters_ = 0;
  roll_degrees_ = 0;
  pitch_degrees_ = 0;
  yaw_degrees_ = 0;
  lat_degrees_ = 0;
  lon_degrees_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaneLocation::~PlaneLocation() {
  SharedDtor();
}

void PlaneLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaneLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaneLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaneLocation_descriptor_;
}

const PlaneLocation& PlaneLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_location_2eproto();
  return *default_instance_;
}

PlaneLocation* PlaneLocation::default_instance_ = NULL;

PlaneLocation* PlaneLocation::New() const {
  return new PlaneLocation;
}

void PlaneLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alt_agl_meters_ = 0;
    alt_asl_meters_ = 0;
    roll_degrees_ = 0;
    pitch_degrees_ = 0;
    yaw_degrees_ = 0;
    lat_degrees_ = 0;
    lon_degrees_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaneLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alt_agl_meters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_agl_meters_)));
          set_has_alt_agl_meters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_alt_asl_meters;
        break;
      }

      // optional float alt_asl_meters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alt_asl_meters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_asl_meters_)));
          set_has_alt_asl_meters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roll_degrees;
        break;
      }

      // optional float roll_degrees = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll_degrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_degrees_)));
          set_has_roll_degrees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pitch_degrees;
        break;
      }

      // optional float pitch_degrees = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch_degrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_degrees_)));
          set_has_pitch_degrees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_yaw_degrees;
        break;
      }

      // optional float yaw_degrees = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw_degrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_degrees_)));
          set_has_yaw_degrees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_lat_degrees;
        break;
      }

      // optional double lat_degrees = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat_degrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_degrees_)));
          set_has_lat_degrees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_lon_degrees;
        break;
      }

      // optional double lon_degrees = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon_degrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_degrees_)));
          set_has_lon_degrees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaneLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float alt_agl_meters = 1;
  if (has_alt_agl_meters()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alt_agl_meters(), output);
  }

  // optional float alt_asl_meters = 2;
  if (has_alt_asl_meters()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alt_asl_meters(), output);
  }

  // optional float roll_degrees = 3;
  if (has_roll_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll_degrees(), output);
  }

  // optional float pitch_degrees = 4;
  if (has_pitch_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pitch_degrees(), output);
  }

  // optional float yaw_degrees = 5;
  if (has_yaw_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yaw_degrees(), output);
  }

  // optional double lat_degrees = 6;
  if (has_lat_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lat_degrees(), output);
  }

  // optional double lon_degrees = 7;
  if (has_lon_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lon_degrees(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaneLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float alt_agl_meters = 1;
  if (has_alt_agl_meters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alt_agl_meters(), target);
  }

  // optional float alt_asl_meters = 2;
  if (has_alt_asl_meters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alt_asl_meters(), target);
  }

  // optional float roll_degrees = 3;
  if (has_roll_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll_degrees(), target);
  }

  // optional float pitch_degrees = 4;
  if (has_pitch_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pitch_degrees(), target);
  }

  // optional float yaw_degrees = 5;
  if (has_yaw_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->yaw_degrees(), target);
  }

  // optional double lat_degrees = 6;
  if (has_lat_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lat_degrees(), target);
  }

  // optional double lon_degrees = 7;
  if (has_lon_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lon_degrees(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaneLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float alt_agl_meters = 1;
    if (has_alt_agl_meters()) {
      total_size += 1 + 4;
    }

    // optional float alt_asl_meters = 2;
    if (has_alt_asl_meters()) {
      total_size += 1 + 4;
    }

    // optional float roll_degrees = 3;
    if (has_roll_degrees()) {
      total_size += 1 + 4;
    }

    // optional float pitch_degrees = 4;
    if (has_pitch_degrees()) {
      total_size += 1 + 4;
    }

    // optional float yaw_degrees = 5;
    if (has_yaw_degrees()) {
      total_size += 1 + 4;
    }

    // optional double lat_degrees = 6;
    if (has_lat_degrees()) {
      total_size += 1 + 8;
    }

    // optional double lon_degrees = 7;
    if (has_lon_degrees()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaneLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaneLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaneLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaneLocation::MergeFrom(const PlaneLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alt_agl_meters()) {
      set_alt_agl_meters(from.alt_agl_meters());
    }
    if (from.has_alt_asl_meters()) {
      set_alt_asl_meters(from.alt_asl_meters());
    }
    if (from.has_roll_degrees()) {
      set_roll_degrees(from.roll_degrees());
    }
    if (from.has_pitch_degrees()) {
      set_pitch_degrees(from.pitch_degrees());
    }
    if (from.has_yaw_degrees()) {
      set_yaw_degrees(from.yaw_degrees());
    }
    if (from.has_lat_degrees()) {
      set_lat_degrees(from.lat_degrees());
    }
    if (from.has_lon_degrees()) {
      set_lon_degrees(from.lon_degrees());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaneLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneLocation::CopyFrom(const PlaneLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneLocation::IsInitialized() const {

  return true;
}

void PlaneLocation::Swap(PlaneLocation* other) {
  if (other != this) {
    std::swap(alt_agl_meters_, other->alt_agl_meters_);
    std::swap(alt_asl_meters_, other->alt_asl_meters_);
    std::swap(roll_degrees_, other->roll_degrees_);
    std::swap(pitch_degrees_, other->pitch_degrees_);
    std::swap(yaw_degrees_, other->yaw_degrees_);
    std::swap(lat_degrees_, other->lat_degrees_);
    std::swap(lon_degrees_, other->lon_degrees_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaneLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaneLocation_descriptor_;
  metadata.reflection = PlaneLocation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace location

// @@protoc_insertion_point(global_scope)
