// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef PROTOBUF_location_2eproto__INCLUDED
#define PROTOBUF_location_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace location {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_location_2eproto();
void protobuf_AssignDesc_location_2eproto();
void protobuf_ShutdownFile_location_2eproto();

class PlaneLocation;

// ===================================================================

class PlaneLocation : public ::google::protobuf::Message {
 public:
  PlaneLocation();
  virtual ~PlaneLocation();

  PlaneLocation(const PlaneLocation& from);

  inline PlaneLocation& operator=(const PlaneLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaneLocation& default_instance();

  void Swap(PlaneLocation* other);

  // implements Message ----------------------------------------------

  PlaneLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaneLocation& from);
  void MergeFrom(const PlaneLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alt_agl_meters = 1;
  inline bool has_alt_agl_meters() const;
  inline void clear_alt_agl_meters();
  static const int kAltAglMetersFieldNumber = 1;
  inline float alt_agl_meters() const;
  inline void set_alt_agl_meters(float value);

  // optional float alt_asl_meters = 2;
  inline bool has_alt_asl_meters() const;
  inline void clear_alt_asl_meters();
  static const int kAltAslMetersFieldNumber = 2;
  inline float alt_asl_meters() const;
  inline void set_alt_asl_meters(float value);

  // optional float roll_degrees = 3;
  inline bool has_roll_degrees() const;
  inline void clear_roll_degrees();
  static const int kRollDegreesFieldNumber = 3;
  inline float roll_degrees() const;
  inline void set_roll_degrees(float value);

  // optional float pitch_degrees = 4;
  inline bool has_pitch_degrees() const;
  inline void clear_pitch_degrees();
  static const int kPitchDegreesFieldNumber = 4;
  inline float pitch_degrees() const;
  inline void set_pitch_degrees(float value);

  // optional float yaw_degrees = 5;
  inline bool has_yaw_degrees() const;
  inline void clear_yaw_degrees();
  static const int kYawDegreesFieldNumber = 5;
  inline float yaw_degrees() const;
  inline void set_yaw_degrees(float value);

  // optional double lat_degrees = 6;
  inline bool has_lat_degrees() const;
  inline void clear_lat_degrees();
  static const int kLatDegreesFieldNumber = 6;
  inline double lat_degrees() const;
  inline void set_lat_degrees(double value);

  // optional double lon_degrees = 7;
  inline bool has_lon_degrees() const;
  inline void clear_lon_degrees();
  static const int kLonDegreesFieldNumber = 7;
  inline double lon_degrees() const;
  inline void set_lon_degrees(double value);

  // @@protoc_insertion_point(class_scope:location.PlaneLocation)
 private:
  inline void set_has_alt_agl_meters();
  inline void clear_has_alt_agl_meters();
  inline void set_has_alt_asl_meters();
  inline void clear_has_alt_asl_meters();
  inline void set_has_roll_degrees();
  inline void clear_has_roll_degrees();
  inline void set_has_pitch_degrees();
  inline void clear_has_pitch_degrees();
  inline void set_has_yaw_degrees();
  inline void clear_has_yaw_degrees();
  inline void set_has_lat_degrees();
  inline void clear_has_lat_degrees();
  inline void set_has_lon_degrees();
  inline void clear_has_lon_degrees();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float alt_agl_meters_;
  float alt_asl_meters_;
  float roll_degrees_;
  float pitch_degrees_;
  double lat_degrees_;
  double lon_degrees_;
  float yaw_degrees_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_location_2eproto();
  friend void protobuf_AssignDesc_location_2eproto();
  friend void protobuf_ShutdownFile_location_2eproto();

  void InitAsDefaultInstance();
  static PlaneLocation* default_instance_;
};
// ===================================================================


// ===================================================================

// PlaneLocation

// optional float alt_agl_meters = 1;
inline bool PlaneLocation::has_alt_agl_meters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaneLocation::set_has_alt_agl_meters() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaneLocation::clear_has_alt_agl_meters() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaneLocation::clear_alt_agl_meters() {
  alt_agl_meters_ = 0;
  clear_has_alt_agl_meters();
}
inline float PlaneLocation::alt_agl_meters() const {
  return alt_agl_meters_;
}
inline void PlaneLocation::set_alt_agl_meters(float value) {
  set_has_alt_agl_meters();
  alt_agl_meters_ = value;
}

// optional float alt_asl_meters = 2;
inline bool PlaneLocation::has_alt_asl_meters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaneLocation::set_has_alt_asl_meters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaneLocation::clear_has_alt_asl_meters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaneLocation::clear_alt_asl_meters() {
  alt_asl_meters_ = 0;
  clear_has_alt_asl_meters();
}
inline float PlaneLocation::alt_asl_meters() const {
  return alt_asl_meters_;
}
inline void PlaneLocation::set_alt_asl_meters(float value) {
  set_has_alt_asl_meters();
  alt_asl_meters_ = value;
}

// optional float roll_degrees = 3;
inline bool PlaneLocation::has_roll_degrees() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlaneLocation::set_has_roll_degrees() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlaneLocation::clear_has_roll_degrees() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlaneLocation::clear_roll_degrees() {
  roll_degrees_ = 0;
  clear_has_roll_degrees();
}
inline float PlaneLocation::roll_degrees() const {
  return roll_degrees_;
}
inline void PlaneLocation::set_roll_degrees(float value) {
  set_has_roll_degrees();
  roll_degrees_ = value;
}

// optional float pitch_degrees = 4;
inline bool PlaneLocation::has_pitch_degrees() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlaneLocation::set_has_pitch_degrees() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlaneLocation::clear_has_pitch_degrees() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlaneLocation::clear_pitch_degrees() {
  pitch_degrees_ = 0;
  clear_has_pitch_degrees();
}
inline float PlaneLocation::pitch_degrees() const {
  return pitch_degrees_;
}
inline void PlaneLocation::set_pitch_degrees(float value) {
  set_has_pitch_degrees();
  pitch_degrees_ = value;
}

// optional float yaw_degrees = 5;
inline bool PlaneLocation::has_yaw_degrees() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlaneLocation::set_has_yaw_degrees() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlaneLocation::clear_has_yaw_degrees() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlaneLocation::clear_yaw_degrees() {
  yaw_degrees_ = 0;
  clear_has_yaw_degrees();
}
inline float PlaneLocation::yaw_degrees() const {
  return yaw_degrees_;
}
inline void PlaneLocation::set_yaw_degrees(float value) {
  set_has_yaw_degrees();
  yaw_degrees_ = value;
}

// optional double lat_degrees = 6;
inline bool PlaneLocation::has_lat_degrees() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlaneLocation::set_has_lat_degrees() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlaneLocation::clear_has_lat_degrees() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlaneLocation::clear_lat_degrees() {
  lat_degrees_ = 0;
  clear_has_lat_degrees();
}
inline double PlaneLocation::lat_degrees() const {
  return lat_degrees_;
}
inline void PlaneLocation::set_lat_degrees(double value) {
  set_has_lat_degrees();
  lat_degrees_ = value;
}

// optional double lon_degrees = 7;
inline bool PlaneLocation::has_lon_degrees() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlaneLocation::set_has_lon_degrees() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlaneLocation::clear_has_lon_degrees() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlaneLocation::clear_lon_degrees() {
  lon_degrees_ = 0;
  clear_has_lon_degrees();
}
inline double PlaneLocation::lon_degrees() const {
  return lon_degrees_;
}
inline void PlaneLocation::set_lon_degrees(double value) {
  set_has_lon_degrees();
  lon_degrees_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace location

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_location_2eproto__INCLUDED
